// Description: dignore - dockerignore generate by dockerfile configuration
// Developer: Nissim Bitan
// Email: nissim.bitan@aquasec.com

package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"

	"github.com/pkg/errors"
	"github.com/spf13/cobra"
)

var Context string
var Dockerfile string
var Overide bool

var rootCmd = &cobra.Command{
	Use:   "dignore [flags]",
	Short: "",
	Long:  ``,
	RunE:  Run,
}

func init() {
	rootCmd.PersistentFlags().StringVarP(&Context, "context", "c", ".", "Set docker context directory path")
	rootCmd.PersistentFlags().StringVarP(&Dockerfile, "dockerfile", "d", "Dockerfile", "Set dockerfile path")
	rootCmd.PersistentFlags().BoolVarP(&Overide, "overide", "o", false, "Overide if existing .dockerignore file")
}

func Run(cmd *cobra.Command, args []string) error {
	var err error

	if Context != "." {
		if _, err = os.Stat(Context); err != nil {
			return errors.New("given context file don't exists")
		}
	}

	if _, err = os.Stat(Dockerfile); err != nil {
		return errors.New("given Dockerfile path don't exists")
	}

	files, err := getFiles()
	if err != nil {
		return err
	}

	err = createDockerignore(files)
	if err != nil {
		return err
	}

	return nil
}

func getFiles() ([]string, error) {
	files := []string{}

	f, err := os.Open(Dockerfile)
	if err != nil {
		return nil, err
	}

	defer f.Close() // nolint: errcheck

	scanner := bufio.NewScanner(f)
	for scanner.Scan() {
		line := scanner.Text()
		if strings.HasPrefix(line, "ADD") || strings.HasPrefix(line, "COPY") {
			currentFiles := strings.Split(line, " ")
			if len(currentFiles) <= 2 {
				return nil, errors.New("Wrong ADD or COPY file in Dockerfile")
			}

			currentFiles = currentFiles[1 : len(currentFiles)-1]
			files = append(files, currentFiles...)
		}
	}

	if err := scanner.Err(); err != nil {
		return nil, err
	}

	return files, nil
}

func isDirectory(path string) (bool, error) {
	var err error

	if Context != "." {
		path = fmt.Sprintf("%s/%s", Context, path)
	}

	file, err := os.Stat(path)
	if err != nil {
		return false, errors.Wrap(err, "File or directory don't exists")
	}

	mode := file.Mode()
	if mode.IsDir() {
		return true, nil
	}

	return false, nil
}

func createDockerignore(files []string) error {
	var err error

	_, err = os.Stat(".dockerignore")
	if err == nil {
		if Overide {
			err = os.Remove(".dockerignore")
			if err != nil {
				return err
			}
		} else {
			return errors.New("File .dockerignore already exist use overide option")
		}
	}

	file, err := os.Create(".dockerignore")
	if err != nil {
		return err
	}

	fmt.Fprintln(file, "# Generated by dignore")
	fmt.Fprintln(file, "*")
	for _, item := range files {
		dir, err := isDirectory(item)
		if err != nil {
			return err
		}

		if dir {
			if item[len(item)-1:] == "/" {
				fmt.Fprintln(file, fmt.Sprintf("!%s*", item))
			} else {
				fmt.Fprintln(file, fmt.Sprintf("!%s/*", item))
			}
		} else {
			fmt.Fprintln(file, fmt.Sprintf("!%s", item))
		}
		if err != nil {
			return err
		}
	}

	defer file.Close() // nolint: errcheck

	return nil
}

func main() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Fprintln(os.Stderr, err) // nolint: errcheck
		os.Exit(1)
	}
}
